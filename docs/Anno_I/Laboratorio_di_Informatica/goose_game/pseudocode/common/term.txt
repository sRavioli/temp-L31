FUNZIONI PER LAVORARE CON IL TERMINALE
======================================

vedere "./globals.txt"
vedere "./string.txt"

Questo file contiene implementazioni di diverse funzioni per poter lavorare con 
il terminale.


--------------------------------------------------------------------------------


FUNZIONE clear_screen()
=======================

Cancella tutto il contenuto presente a schermo utilizzando direttive specifiche
per il sistema operativo.

INPUT:
- nullo, non riceve nulla.

OUTPUT:
- nullo, non restituisce nulla.


------------------------------------------------------------


FUNZIONE clear_line()
=====================

Cancella l'ultima riga su cui si è stampato qualcosa utilizzando delle direttive
specifiche per il sistema operativo.

INPUT:
- nullo, non riceve nulla.

OUTPUT:
- nullo, non restituisce nulla.


------------------------------------------------------------


FUNZIONE get_term_size()
========================

Restituisce le dimensioni del terminale utilizzando direttive specifiche per il 
sistema operativo.

INPUT:
- width, variabile che riceverà il valore della larghezza del terminale, intero 
  maggiore di zero;
- height, variabile che riceverà il valore dell'altezza del terminale, intero 
  maggiore di zero.

OUTPUT:
- width, il valore della larghezza del terminale, intero maggiore di zero;
- height, il valore dell'altezza del terminale, intero maggiore di zero;


------------------------------------------------------------


FUNZIONE print_text()
=====================

INPUT:
- text, testo che deve essere stampato, stringa.
- direction, in che direzione stampare il testo, stringa che può assumere tre 
  valori: "left", "center", "right".

OUTPUT:
- nullo, non restituisce output, vuoto.

ALGORITMO:
SE (str_compare(direction, "left") = 1)
  ALLORA StampareAVideo(text)
  ALTRIMENTI SE (str_compare(direction, "center") = 1)
    ALLORA print_text_center(text, width)
    ALTRIMENTI SE (str_compare(direction, "right") = 1)
      ALLORA print_text_right(text, width)
      ALTRIMENTI StampareAVideo(text)
    FINE
  FINE
FINE


FUNZIONE print_text_center()
--------------------------

INPUT:
- text, testo che deve essere stampato, stringa;
- width, larghezza della finestra immaginaria su cui allineare il testo, intero
  maggiore di zero;

OUTPUT:
- nullo, non restituisce output, vuoto.

LAVORO:
- text_copy, copia della stringa originale, stringa;
- num_lines, numero di righe all'interno della stringa, intero maggiore di zero;

ALGORITMO:
text_copy := str_copy(text)
num_lines := 1
MENTRE (text_copy <> STR_END)
  SE (text_copy = LINE_END)
    num_lines := num_lines + 1
  FINE
FINE

void printCenteredMultilineText(const char *text) {
    // Allocate memory for an array of strings to store the lines
    char **lines = (char **)malloc(numLines * sizeof(char *));
    if (lines == NULL) {
        printf("Error: Memory allocation failed.\n");
        free(textCopy);
        return;
    }

    // Split the input text at '\n' and store each line in the array
    char *line = strtok(textCopy, "\n");
    int i = 0;
    while (line != NULL) {
        lines[i] = line;
        line = strtok(NULL, "\n");
        i++;
    }

    // Get the terminal width
    int terminalWidth, terminalHeight;
    getTerminalSize(&terminalHeight, &terminalWidth);
    if (terminalWidth == -1) {
        printf("Warning: Failed to get terminal width. Using default width of 80 characters.\n");
        terminalWidth = 80;
    }

    // Print each line centered in the terminal
    for (int j = 0; j < numLines; j++) {
        int lineLength = strlen(lines[j]);
        int padding = (terminalWidth - lineLength) / 2;
        printf("%*s%s\n", padding, "", lines[j]);
    }

    // Free the dynamically allocated memory
    free(lines);
    free(textCopy);
}
