CASI DI TEST DELLE FUNZIONI DEL MODULO DI GIOCO
===============================================

FUNZIONE ask_num_squares()
==========================

Richiede all'utente di inserire il numero di caselle del tabellone di gioco e
restituisce il valore inserito.
- TEST #1
  INPUT(da tastiera):
  59

  OUTPUT
  - num_squares := 59

- TEST #2
  INPUT(da tastiera):
  5

  OUTPUT:
  non restituisce nulla e continua a chiedere finché il numero è valido

- TEST #3
  INPUT(da tastiera):
  80

  OUTPUT:
  - num_squares := 80

- TEST #4
  INPUT(da tastiera):
  66

  OUTPUT:
  - num_squares := 66

- TEST #5
  INPUT(da tastiera):
  1

  OUTPUT:
  non restituisce nulla e continua a chiedere finché il numero è valido


FUNZIONE ask_num_players()
==========================

Chiede il numero di giocatori all'utente e lo restituisce.

- TEST #1
  INPUT(da tastiera):
  2

  OUTPUT
  num_players := 2

- TEST #2
  INPUT(da tastiera):
  5

  OUTPUT:
  non restituisce nulla e continua a chiedere finché il numero è valido

- TEST #3
  INPUT(da tastiera):
  3

  OUTPUT:
  num_players := 3

- TEST #4
  INPUT(da tastiera):
  4

  OUTPUT:
  num_players := 4

- TEST #5
  INPUT(da tastiera):
  1

  OUTPUT:
  non restituisce nulla e continua a chiedere finché il numero è valido


FUNZIONE init_board()
=====================

Crea un tabellone vuoto con la dimensione data, lo riempie di caselle e inserisce
le caselle oca e caselle speciali.

- TEST #1
  INPUT:
  dim := 50

  OUTPUT:
  board := {
    squares := [ 1,  2, -1,  4,  5,  6,  7,  8,  0, -2, 11, 12, 13, 14, 15, 16,
                -3,  0, 19, 20, 21, 22, -4, 24, 25, 26,  0, -5, 29, 30, 31, -6,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48
                49, 50],
    dim := 50
  }
- TEST #2
  INPUT:
  dim := 64

  OUTPUT:
  board := {
    squares := [ 1,  2,  3, -1,  5,  6,  7,  8,  0, 10, 11, 12, -2, 14, 15, 16,
                17,  0, 19, 20, 21, -3, 23, 24  25, 26,  0, 28, -4, 30, 31, 32,
                33, 34, 35,  0, -5, 38, 39, 40, -6, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64],
    dim := 64,
  }

- TEST #3
  INPUT:
  dim := 73

  OUTPUT:
  board := {
    squares := [  1,  2, 3,  -1,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, -2, 16,
                 17,  0, 19, 20, 21, 22, 23, 24, -3, 26,  0, 28, 29, 30, 31, 32,
                 33, -4, 35,  0, 37, 38, 39, 40, 41, -5, 43, 44,  0, 46, -6, 48,
                 49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                 65, 66, 67, 68, 69, 70, 71,  0, 73],
    dim := 73,
  }

- TEST #4
  INPUT:
  dim := 82

  OUTPUT:
  board := {
    squares := [ 1,  2,  3,  4, -1,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                -2,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, -3, 29, 30, 31, 32,
                33, 34, 35,  0, 37, -4, 39, 40, 41, 42, 43, 44,  0, 46, -5, 48,
                49, 50, 51, -6, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                0, 82] ,
    dim := 82,
  }

- TEST #5
  INPUT:
  dim := 87

  OUTPUT:
  board := {
    squares := [ 1,  2,  3,  4, -1,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, -2, 20, 21, 22, 23, 24, 25, 26,  0, 28, -3, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, -4, 41, 42, 43, 44,  0, 46, 47, 48,
                49, -5, 51, 52, 53,  0, 55, -6, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                 0, 82, 83, 84, 85, 86, 87],
    dim := 87,
  }


FUNZIONE insert_goose_squares()
===============================

Aggiunge le caselle oca al tabellone di gioco, a partire dalla casella con
indice GOOSE_SPACING, con un intervallo tra di esse sempre pari a GOOSE_SPACING.

- TEST #1
  INPUT:
  board := {
    squares := [ 1,  2, -1,  4,  5,  6,  7,  8,  0, -2, 11, 12, 13, 14, 15, -3,
                17,  0, 19, 20, 21, -4, 23, 24, 25, 26,  0, -5, 29, -6, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48
                49, 50],
    dim := 50
  }

  OUTPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, 28, 29, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50],
    dim := 50,
  }

- TEST #2
  INPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
                17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
                65, 66, 67, 68, 69],
    dim := 69,
  }

  OUTPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, 28, 29, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69],
    dim := 69,
  }

- TEST #3
  INPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
                17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
                65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78],
    dim := 78,
  }

  OUTPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, 28, 29, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78],
    dim := 78,
  }

- TEST #4
  INPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
                17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
                65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                81, 82, 83, 84, 85],
    dim := 85
  }

  OUTPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, 28, 29, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                 0, 82, 83, 84, 85],
    dim := 85,
  }

- TEST #5
  INPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
                17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
                65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                81, 82, 83, 84, 85, 86, 87, 88],
    dim := 88,
  }

  OUTPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, 28, 29, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                 0, 82, 83, 84, 85, 86, 87, 88],
    dim := 88,
  }


FUNZIONE insert_special_squares()
=================================

Inserisce le caselle speciali nel tabellone di gioco.

- TEST #1
  INPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, 28, 29, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55],
    dim := 55,
  }
  OUTPUT:
  board := {
    squares := [ 1,  2, -1,  4,  5,  6,  7,  8,  0, 10, -2, 12, 13, 14, 15, 16,
                17,  0, -3, 20, 21, 22, 23, 24, -4, 26,  0, 28, 29, 30, -5, 32,
                33, 34, -6,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55],
    dim := 55
  }
- TEST #2
  INPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, 28, 29, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70],
    dim := 70,
  }
  OUTPUT:
  board := {
      squares := [ 1,  2,  3, -1,  5,  6,  7,  8,  0, 10, 11, 12, 13, -2, 15, 16,
                  17,  0, 19, 20, 21, 22, 23, -3, 25, 26,  0, 28, 29, 30, 31, -4,
                  33, 34, 35,  0, 37, 38, 39, -5, 41, 42, 43, 44,  0, -6, 47, 48,
                  49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                  65, 66, 67, 68, 69, 70],
      dim := 70,
    }
- TEST #3
  INPUT:
  board := {
      squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
                  17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                  33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
                  65],
      dim := 65,
    }
  OUTPUT:
  board := {
    squares := [ 1,  2,  3, -1,  5,  6,  7,  8,  0, 10, 11, 12, -2, 14, 15, 16,
                17,  0, 19, 20, 21, -3, 23, 24, 25, 26,  0, 28, 29, -4, 31, 32,
                33, 34, 35,  0, -5, 38, 39, 40, -6, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65],
    dim := 65,
  }
- TEST #4
  INPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, 28, 29, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80],
    dim := 80,
  }
  OUTPUT:
  board := {
    squares := [ 1,  2,  3,  4, -1,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, -2,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, -3, 29, 30, 31, 32,
                33, 34, 35,  0, -4, 38, 39, 40, 41, 42, 43, 44,  0, -5, 47, 48,
                49, 50, -6, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80],
    dim := 80,
  }
- TEST #5
  INPUT:
  board := {
    squares := [ 1,  2,  3,  4,  5,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, 19, 20, 21, 22, 23, 24, 25, 26,  0, 28, 29, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, 40, 41, 42, 43, 44,  0, 46, 47, 48,
                49, 50, 51, 52, 53,  0, 55, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                 0, 82, 83, 84, 85, 86],
    dim := 86,
  }
  OUTPUT:
  board := {
    squares := [ 1,  2,  3,  4, -1,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, -2, 20, 21, 22, 23, 24, 25, 26,  0, 28, -3, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, -4, 41, 42, 43, 44,  0, 46, 47, 48,
                -5, 50, 51, 52, 53,  0, -6, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                 0, 82, 83, 84, 85, 86],
    dim := 86,
  }


FUNZIONE check_special_square()
===============================

| INPUT  | OUTPUT ATTESO  |
| ------ | -------------- |
| 5,  90 | 5              |
| 8,  50 | 8              |
| 9,  75 | 10             |
| 18, 80 | 19             |
| 89, 90 | 89             |
| 2,  85 | 2              |
| 3,  50 | 3              |


FUNZIONE square_to_str()
========================

| INPUT           | OUTPUT ATTESO  |
| --------------- | -------------- |
| GOOSE_VALUE     | "X2"           |
| BRIDGE_VALUE    | "BR"           |
| INN_VALUE       | "IN"           |
| WELL_VALUE      | "WE"           |
| LABYRINTH_VALUE | "LA"           |
| PRISON_VALUE    | "PR"           |
| SKELETON_VALUE  | "SK"           |
| 20              | "20"           |
| 30              | "30"           |


FUNZIONE move_player()
======================

- TEST #1:
  INPUT
  players := {
    players := [
        {NA1, 786549, 79, 4, 0},
        {NA2, 786550 , 3, 6, 0},
        {NA3, 786551, 43, 4, 0},
        {NA4, 786552, 7, 7, 0},
    ],
    num_players := 4
  }
  player = {NA1, 786549, 79, 4, 0}
  throw := 6
  board := {
    squares := [ 1,  2,  3,  4, -1,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, -2, 20, 21, 22, 23, 24, 25, 26,  0, 28, -3, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, -4, 41, 42, 43, 44,  0, 46, 47, 48,
                -5, 50, 51, 52, 53,  0, -6, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                 0, 82, 83, 84, 85, 86],
    dim := 86
  }

  OUTPUT
  player := {NA1, 786549, 85, 4, 0}

- TEST #2:
  INPUT
  players := {
    players := [
      {NA1, 786549, 79, 4, 0},
      {NA2, 786550 , 3, 6, 0},
      {NA3, 786551, 43, 4, 0},
      {NA4, 786552, 7, 7, 0},
    ]
    num_players := 4
  }
  player = {NA2, 786550 , 3, 6, 0}
  throw = 5
  board := {
    squares := [ 1,  2,  3,  4, -1,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, -2, 20, 21, 22, 23, 24, 25, 26,  0, 28, -3, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, -4, 41, 42, 43, 44,  0, 46, 47, 48,
                -5, 50, 51, 52, 53,  0, -6, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                 0, 82, 83, 84, 85, 86],
    dim := 86
  }

  OUTPUT
  player := {NA2, 786550, 8, 6, 0}

- TEST #3:
  INPUT
  players := {
  	players := [
      {NA1, 786549, 79, 4, 0}
      {NA2, 786550 , 3, 6, 0}
      {NA3, 786551, 43, 4, 0}
      {NA4, 786552, 7, 7, 0}
    ]
    num_players := 4
  }
  player = {NA3, 786551, 43, 4, 0}
  throw = 2
  board := {
    squares := [ 1,  2,  3,  4, -1,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, -2, 20, 21, 22, 23, 24, 25, 26,  0, 28, -3, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, -4, 41, 42, 43, 44,  0, 46, 47, 48,
                -5, 50, 51, 52, 53,  0, -6, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                 0, 82, 83, 84, 85, 86],
    dim := 86
  }

  OUTPUT
  player := {NA3, 786551, 45, 4, 0}

- TEST #4:
  INPUT
  players := {
  	players := [
      {NA1, 786549, 79, 4, 0}
      {NA2, 786550 , 3, 6, 0}
      {NA3, 786551, 43, 4, 0}
      {NA4, 786552, 7, 7, 0}
    ]
    num_players := 4
  }
  player = {NA4, 786552, 7, 7, 0}
  throw = 6
  board := {
    squares := [ 1,  2,  3,  4, -1,  6,  7,  8,  0, 10, 11, 12, 13, 14, 15, 16,
                17,  0, -2, 20, 21, 22, 23, 24, 25, 26,  0, 28, -3, 30, 31, 32,
                33, 34, 35,  0, 37, 38, 39, -4, 41, 42, 43, 44,  0, 46, 47, 48,
                -5, 50, 51, 52, 53,  0, -6, 56, 57, 58, 59, 60, 61, 62,  0, 64,
                65, 66, 67, 68, 69, 70, 71,  0, 73, 74, 75, 76, 77, 78, 79, 80,
                 0, 82, 83, 84, 85, 86],
    dim := 86
  }

  OUTPUT
  player := {NA4, 786552, 13, 7, 0}


FUNZIONE is_player_in_square()
==============================

Controlla se un altro giocatore, diverso dal giocatore attuale, è posizionato
nella casella data.

- TEST #1:
  INPUT:
  players  := {
   players := [
     {ABC, 656667, 1, 20, 0},
     {ADA, 656865, 3, 25, 0},
     {BAA, 666565, 1, 35, 0},
   ],
     players_num  :=  3
   }
   Player := {ABC, 656667, 1, 20, 0}
   square := 20

  OUTPUT:
  result := FALSE

- TEST #2:
  INPUT:
  players := {
   players := [
     {ABC, 656667, 1, 20, 0},
     {ADA, 656865, 1, 25, 2},
     {BAA, 666565, 1, 35, 0},
     {BAB, 666566, 10, 35, 0},
   ],
     players_num  :=  4
   }
  Player := {BAA, 666565, 1, 35, 0}
  square := 35

  OUTPUT:
  result := TRUE

- TEST #3:
  INPUT:
  players := {
    players := [
      {ABA, 656665, 5, 40, 1},
      {ADA, 656865, 1, 44, 0},
    ],
    players_num := 2
  }
  Player := {ADA, 656865, 1, 44, 0}
  square := 44

  OUTPUT:
  result := FALSE

- TEST #4:
  INPUT:
  players := {
   players := [
     {ABC, 656667, 1, 5, 2},
     {ADA, 656865, 1, 31, 0},
     {BAA, 666565, 1, 31, 2},
   ],
   players_num := 3
   }
   Player := {ADA, 656865, 1, 31, 0}
   square := 31

  OUTPUT:
  result := TRUE

- TEST #5:
  INPUT:
  players  :=  {
   players := [
     {ABC, 656667, 1, 10, 1},
     {ADA, 656865, 3, 25, 0},
     {BAA, 666565, 1, 42, 2},
     {BAB, 666566, 2, 43, 0},
   ],
   players_num := 4
   }
  Player := {ADA, 656865, 3, 25, 0}
  square := 25

 OUTPUT:
 result := FALSE

FUNZIONE get_player_in_square()
===============================

Restituisce il giocatore, diverso dal giocatore attuale, posizionato nella
casella data

- TEST #1:
  INPUT:
  players := {
   players := [
     {"ABC", 656667, 1, 10, 1},
     {"ADA", 656865, 3, 30, 0},
     {"BAA", 666565, 1, 20, 2},
     {"BAB", 666566, 2, 30, 0},
   ],
   players_num := 4
   }
  Player := {"ADA", 656865, 3, 30, 0}
  square := 30

  OUTPUT:
  new_player := {"BAB", 666566, 2, 30, 0}

- TEST #2:
  INPUT:
  players := {
   players := [
     {"ABC", 656667, 10, 55, 0},
     {"ADA", 656865, 3, 55, 0},
     {"BAA", 666565, 1, 35, 2},
   ],
   players_num := 3
   }
  Player := {"ADA", 656865, 3, 55, 0}
  square := 55

  OUTPUT:
  new_player := {"ABC", 656667, 10, 55, 0}

- TEST #3:
  INPUT:
  players := {
   players := [
     {"ABC", 656667, 6, 22, 0},
     {"ADA", 656865, 1, 22, 0},
   ],
   players_num := 2
   }
  Player := {"ADA", 656865, 1, 22, 0}
  square := 22

  OUTPUT:
  new_player := {"ABC", 656667, 6, 22, 0}

- TEST #4:
  INPUT:
  players := {
   players := [
     {"ABC", 656667, 1, 85, 0},
     {"ADA", 656865, 7, 85, 0},
     {"BAA", 666565, 1, 25, 1},
   ],
   players_num := 3
   }
  Player := {"ABC", 656667, 1, 85, 0}
  square := 85

   OUTPUT:
   new_player := {"ADA", 656865, 7, 85, 0}

- TEST #5:
  INPUT:
  players := {
   players := [
     {"ABC", 656667, 1, 27, 2},
     {"ADA", 656865, 7, 25, 1},
     {"BAA", 666565, 5, 19, 0},
     {"BAB", 666566, 1, 19, 0},
   ],
   players_num := 4
   }
 Player := {"BAB", 666566, 1, 19, 0}
 square := 19

  OUTPUT:
  new_player := {"BAA", 666565, 5, 19, 0}

FUNZIONE is_player_winner()
===========================

Controlla se c'è un vincitore tra i giocatori, ovvero se un giocatore è
arrivato alla casella finale

- TEST #1:
  INPUT:
  board := {
     squares := [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
                 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
                 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
                 83, 84, 85, 86, 87, 88, 89, 90],
     dim := 90
  }
  players := {
   players := [
     {"ABC", 656667, 1, 10, 1},
     {"ADA", 656865, 3, 20, 0},
     {"BAA", 666565, 5, 52, 2},
     {"BAB", 666566, 1, 73, 0},
   ],
     players_num := 4
   }

  OUTPUT:
  result := FALSE

- TEST #2:

  INPUT:
  board := {
    squares := [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
                35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
                67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
                83, 84, 85, 86, 87, 88, 89, 90],
    dim := 90
  }
  players := {
   players := [
     {"ABC", 656667, 1, 54, 1},
     {"ADA", 656865, 3, 23, 0},
     {"BAA", 666565, 1, 90, 0},
   ],
   players_num := 3
   }

  OUTPUT:
  result := TRUE

- TEST #3:

  INPUT:
  board := {
    squares := [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
                35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
    dim := 50
  }
  players := {
   players := [
     {"ADA", 656865, 3, 49, 0},
     {"BAB", 666566, 1, 43, 0},
   ],
   players_num := 2
   }

  OUTPUT:
  result := FALSE

- TEST #4:
  INPUT:
  board := {
    squares := [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
                35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
                67, 68, 69, 70],
    dim := 70
  }
  players :=  {
   players := [
     {"ABC", 656667, 1, 54, 1},
     {"ADA", 656865, 167, 0},
     {"BAA", 666565, 2, 12, 2},
     {"BAB", 666566, 1, 33, 0},
   ],
     players_num := 4
   }

  OUTPUT:
  result := FALSE

- TEST #5:

  INPUT:
  board := {
    squares := [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
                35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
   dim := 45
  }
Players  :=  {
   players := [
     {"ABC", 656667, 1, 10, 1},
     {"ADA", 656865, 1, 22, 0},
     {"BAA", 666565, 1, 45, 0},
     {"BAB", 666566, 2, 12, 2},
   ],
     players_num := 4
   }

  OUTPUT:
  result := TRUE

square_to_str();
fill_players(); {["username", score, position, etc.], [altro player], ...}

-------------------------------------------------------------------------------

FUNZIONE interactive_roll()
===========================

Questa funzione fa tirare i dadi in maniera interattiva ad ogni giocatore,
chiedendo allo stesso di premere qualsiasi tasto per farlo. Dopodiché riempie
l'array ricevuto.

- TEST #1:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }

  OUTPUT:
  dice_rolls := [7, 7]

- TEST #2:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
    ],
    num_players := 4
  }

  OUTPUT:
  dice_rolls := [10, 7, 12, 7]

- TEST #3:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
    ],
    num_players := 3
  }

  OUTPUT:
  dice_rolls := [7, 1, 8]

- TEST #4:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }

  OUTPUT:
  dice_rolls := [5, 9]

- TEST #5:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
    ],
    num_players := 4
  }

  OUTPUT:
  dice_rolls := [5, 9, 5, 11]

-------------------------------------------------------------------------------

FUNZIONE selection_sort_players()
=================================

Questa funzione utilizza il selection sort per riordinare i giocatori secondo
i loro lanci dei dadi.

- TEST #1:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }
  dice_rolls := [7, 7]

  OUTPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }
  dice_rolls := [7, 7]

- TEST #2:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
    ],
    num_players := 4
  }
  dice_rolls := [10, 7, 12, 7]

  OUTPUT:
  players := {
    players := [
      {"CCC", 676767, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
    ],
    num_players := 4
  }
  dice_rolls := [12, 10, 7, 7]

- TEST #3:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
    ],
    num_players := 3
  }
  dice_rolls := [7, 1, 8]

  OUTPUT:
  players := {
    players := [
      {"CCC", 676767, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 3
  }
  dice_rolls := [8, 7, 1]

- TEST #4:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }
  dice_rolls := [5, 9]

  OUTPUT:
  players := {
    players := [
      {"BBB", 666666, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
    ],
    num_players := 2
  }
  dice_rolls := [9, 5]

- TEST #5:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
    ],
    num_players := 4
  }
  dice_rolls := [5, 9, 5, 11]

  OUTPUT:
  players := {
    players := [
      {"DDD", 686868, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
    ],
    num_players := 4
  }
  dice_rolls := [11, 9, 5, 5]


FUNZIONE interactive_reroll()
=============================

Questa funzione fa rilanciare i dadi ai giocatori che hanno ottenuto lo stesso
numero durante il lancio dei dadi. Dopodiché riordina i giocatori.

- TEST #1:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }
  dice_rolls := [7, 7]

  OUTPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }
  dice_rolls := [9, 5]

- TEST #2:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
    ],
    num_players := 4
  }
  dice_rolls := [12, 10, 7, 7]

  OUTPUT:
  players := {
    players := [
      {"CCC", 676767, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 4
  }
  dice_rolls := [12, 10, 9, 7]

- TEST #3:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
    ],
    num_players := 3
  }
  dice_rolls := [8, 7, 1]

  OUTPUT:
  players := {
    players := [
      {"CCC", 676767, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 3
  }
  dice_rolls := [8, 7, 1]

- TEST #4:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }
  dice_rolls := [9, 5]

  OUTPUT:
  players := {
    players := [
      {"BBB", 666666, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
    ],
    num_players := 2
  }
  dice_rolls := [9, 5]

- TEST #5:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
    ],
    num_players := 4
  }
  dice_rolls := [11, 9, 5, 5]

  OUTPUT:
  players := {
    players := [
      {"DDD", 686868, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
    ],
    num_players := 4
  }
  dice_rolls := [11, 9, 7, 3]

-------------------------------------------------------------------------------

FUNZIONE sort_players_by_dice()
===============================

Riordina i giocatori nella struttura Players in base ai loro lanci di dadi.
Lancia i dadi per ogni giocatore, assegna i valori dei dadi all'array dice_rolls
ordina l'array dei giocatori utilizzando l'ordinamento di selezione basato sul
lancio di dadi, rilancia i dadi per i giocatori in parità e stampa l'elenco
ordinato di giocatori.

- TEST #1:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }

  OUTPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }

- TEST #2:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
    ],
    num_players := 4
  }

  OUTPUT:
  players := {
    players := [
      {"CCC", 676767, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 4
  }

- TEST #3:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
    ],
    num_players := 3
  }

  OUTPUT:
  players := {
    players := [
      {"CCC", 676767, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 3
  }

- TEST #4:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
    ],
    num_players := 2
  }

  OUTPUT:
  players := {
    players := [
      {"BBB", 666666, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
    ],
    num_players := 2
  }

- TEST #5:
  INPUT:
  players := {
    players := [
      {"AAA", 656565, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"DDD", 686868, 0, 0, 0},
    ],
    num_players := 4
  }

  OUTPUT:
  players := {
    players := [
      {"DDD", 686868, 0, 0, 0},
      {"BBB", 666666, 0, 0, 0},
      {"CCC", 676767, 0, 0, 0},
      {"AAA", 656565, 0, 0, 0},
    ],
    num_players := 4
  }

-------------------------------------------------------------------------------

create_players(): (e sottofunzioni)

move_player() + check_player_pos();
is_player_in_square() + get_player_in_square();
is_player_winner()
